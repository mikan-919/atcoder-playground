`````
src/extends/array.ts
```
interface Array<T> {
  transpose<U extends T>(this: U[][]): T[][]
  zip<U>(other: U[]): [T, U][]
  sum(this: number[]): number
}

Array.prototype.transpose = function <T>(this: T[][]) {
  if (this.length === 0) return []
  if (this[0].length === 0) return [[]]
  return this[0].map((_, i) => this.map((row) => row[i]))
} as Array<unknown>['transpose']

Array.prototype.zip = function <T, U>(this: T[], other: U[]): [T, U][] {
  const minLength = Math.min(this.length, other.length)
  const result: [T, U][] = []
  for (let i = 0; i < minLength; i++) {
    result.push([this[i], other[i]])
  }
  return result
} as Array<unknown>['zip']

Array.prototype.sum = function (this: number[]) {
  if (this.length === 0) return 0
  return this.reduce((acc, x) => acc + x, 0)
} as Array<number>['sum']

src/extends/string.ts
```
interface String {
  terms<T>(
    this: string,
    mapper: (value: string, index?: number, array?: string[]) => T,
  ): T[] // `this` を string に限定
  toNumber(this: string): number // `this` を string に限定
  toArray(this: string): string[] // `this` を string に限定
}

String.prototype.terms = function <T>(
  this: string, // `this` を明示的に指定
  mapper: (value: string, index?: number, array?: string[]) => T,
): T[] {
  return this.split(' ').map(mapper)
} as String['terms']

String.prototype.toNumber = function (this: string) {
  // `this` を明示的に指定
  return Number(this)
} as String['toNumber']

String.prototype.toArray = function (this: string) {
  // `this` を明示的に指定
  return [...this]
} as String['toArray']

src/stdin.ts
```
import { readFileSync } from 'node:fs'

export const useStdin = async <T>(
  processInput: (reader: {
    readLine: () => string
    readLines: (n: number) => string[]
    readNumbers: <U extends number = number>() => U[]
    readNumberLines: <U extends number = number>(n: number) => U[][]
    readMatrix: <U extends number = number>(rows: number) => U[][]
  }) => Promise<T>,
) => {
  try {
    const input = readFileSync('/dev/stdin', 'utf8').split('\n')

    const readLine = () => {
      return input.shift() ?? ''
    }

    const readLines = (n: number) => {
      return Array(n)
        .fill(0)
        .map(() => readLine())
    }

    const readNumbers = <U extends number = number>() => {
      const line = readLine()
      return line.split(' ').map(Number) as U[]
    }

    const readNumberLines = <U extends number = number>(n: number) => {
      const lines = readLines(n)
      return lines.map((e) => e.split(' ').map(Number)) as U[][]
    }

    const readMatrix = <U extends number = number>(rows: number) => {
      return Array(rows)
        .fill(0)
        .map(() => readNumbers<U>())
    }

    await processInput({
      readLine,
      readLines,
      readNumbers,
      readMatrix,
      readNumberLines,
    })
  } catch (error) {
    console.error('Error reading input:', error)
  }
}

src/stdout.ts
```
export const Yes = (): void => console.log('Yes')
export const No = (): void => console.log('No')
export const print = (...args: unknown[]): void => console.log(...args)

export function printArray(array: unknown[], separator = ' '): void {
  console.log(array.join(separator))
}

src/extends.ts
```
import './extends/string'
import './extends/array'

src/utils.ts
```
type BaseFunc<T extends unknown[], U> = (...args: T) => U

export function memorize<T extends unknown[], U>(
  fn: BaseFunc<T, U>,
): BaseFunc<T, U> {
  const cache = new Map<string, U>()

  // ラップされた関数
  const wrapped: BaseFunc<T, U> = (...args: T): U => {
    const key = JSON.stringify(args)
    if (cache.has(key)) return cache.get(key) as U

    const result = fn(...args)
    cache.set(key, result)
    return result
  }

  return wrapped
}

/**
 * 指定範囲の数値配列を生成する関数
 * @param end 終点 (exclusive)
 * @param start 始点 (inclusive, default: 0)
 * @returns 数値配列
 */
export function range(end: number, start = 0): number[] {
  return Array.from({ length: end - start }, (_, i) => start + i)
}

/**
 * 最大公約数 (Greatest Common Divisor) を計算する関数
 * @param a
 * @param b
 * @returns 最大公約数
 */
export function gcd(a: number, b: number): number {
  let tempA = a
  let tempB = b
  while (tempB) {
    const remainder = tempA % tempB
    tempA = tempB
    tempB = remainder
  }
  return tempA
}
/**
 * 最小公倍数 (Least Common Multiple) を計算する関数
 * @param a
 * @param b
 * @returns 最小公倍数
 */
export function lcm(a: number, b: number): number {
  return (a * b) / gcd(a, b)
}

src/index.ts
```
import { useStdin } from './stdin'
import { No, print, Yes } from './stdout'
import './extends'

useStdin(async function main({
  readNumbers,
  readLines,
  readNumberLines,
  readLine,
}) {})

`````
